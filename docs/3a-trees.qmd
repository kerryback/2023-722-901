---
title:  "Trees"
author: <br><br><br><br><span style="font-family:perpetua; font-variant:small-caps; color:#606060;">Kerry Back</span><br><br><img src="RiceBusiness-transparent-logo-sm.png"  height=80>
execute:
  echo: false
  jupyter: python3
  cache: true
format: 
  revealjs:
    highlight-style: monokai
    code-fold: true
    code-copy: hover
    scrollable: true
    slide-number: true
    preview-links: true
    self-contained: true
    controls: true
    transition: fade
    theme: [solarized, 2023.scss]
    incremental: true
---


## Decision Trees


- Split data sequentially into subsets based on the value of a single feature
  - Above a threshold into one group
  - Below the threshold into the other
- Prediction in each subset is the plurality class (for classification) or the cell mean (for regression).
- Try to minimize impurity in classification and (usually) mean squared error in regression.

## Example

. . .

![](decision-tree.png){height=440}


## Another example

. . .

![](decision-tree-partition.png){height=560}


## Example: train from 2021-12, predict for 2022-01

- Get data from the SQL database as before

. . .

```.p
df = pd.read_sql(
    """
    select ticker, date, ret, roeq, mom12m
    from data
    where date in ('2021-12', '2022-01')
    """, 
    conn
)
```

```{python}
from sqlalchemy import create_engine
import pymssql
import pandas as pd

server = "mssql-82792-0.cloudclusters.net:16272"
username = "user"
password = "RiceOwls1912" # paste password between quote marks
database = "ghz"

string = "mssql+pymssql://" + username + ":" + password + "@" + server + "/" + database

conn = create_engine(string).connect()

df = pd.read_sql(
    """
    select ticker, date, ret, roeq, mom12m
    from data
    where date in ('2021-12', '2022-01')
    """, 
    conn
)
df = df.dropna()
```

## Transform each cross-section

. . .

```.p
from sklearn.preprocessing import QuantileTransformer
qt = QuantileTransformer(output_distribution="normal")

def qtxs(d):
    x = qt.fit_transform(d)
    return pd.DataFrame(x, columns=d.columns, index=d.index)

df[["roeq", "mom12m", "ret"]] = df.groupby(
  "date", 
  group_keys=False
)[["roeq", "mom12m", "ret"]].apply(qtxs)
```

```{python}
from sklearn.preprocessing import QuantileTransformer
qt = QuantileTransformer(output_distribution="normal")
def qtxs(d):
    x = qt.fit_transform(d)
    return pd.DataFrame(x, columns=d.columns, index=d.index)

df[["roeq", "mom12m", "ret"]] = df.groupby(
  "date", 
  group_keys=False
)[["roeq", "mom12m", "ret"]].apply(qtxs)
```

## Fit a regression tree

. . .

```{.p code-line-numbers="1|3-4|6-9|10"}
from sklearn.tree import DecisionTreeRegressor

Xtrain = df[df.date=='2021-12'][["roeq", "mom12m"]]
ytrain = df[df.date=='2021-12']["ret"]

model = DecisionTreeRegressor(
  max_depth=2,
  random_state=0
)
model.fit(Xtrain, ytrain)
```

```{python}
from sklearn.tree import DecisionTreeRegressor

Xtrain = df[df.date=='2021-12'][["roeq", "mom12m"]]
ytrain = df[df.date=='2021-12']["ret"]

model = DecisionTreeRegressor(
  max_depth=2,
  random_state=0
)
_=model.fit(Xtrain, ytrain)
```

## View the regression tree

. . .

```p
from sklearn.tree import plot_tree
_ = plot_tree(model)
```

. . .

```{python}
import matplotlib as mpl
from sklearn.tree import plot_tree
import matplotlib.pyplot as plt

mpl.rcParams["figure.figsize"] = (16,5)

_ = plot_tree(model)
```

## Feature importance

- What fraction of the splitting is each feature responsible for?

. . .

```p
pd.Series(model.feature_importances_, index=Xtrain.columns)
```

. . .

```{python}
pd.Series(model.feature_importances_, index=Xtrain.columns)
```
