---
title:  "Put-Call Parity"
author: <br><br><br><br><span style="font-family:perpetua; font-variant:small-caps; color:#606060;">Kerry Back</span><br><br><img src="RiceBusiness-transparent-logo-sm.png"  height=80>
execute:
  echo: false
  jupyter: python3
  cache: true
format: 
  revealjs:
    highlight-style: monokai
    code-fold: true
    code-copy: hover
    scrollable: true
    slide-number: true
    preview-links: true
    self-contained: true
    controls: true
    transition: fade
    theme: [solarized, 2023.scss]
    incremental: true
    cache: true
---

# Put-Call Parity

##

- At maturity, protective put portfolio (underlying + put) is same as cash + call
- Cash = strike
- Stock ends up $\Rightarrow$ 
  - With underlying + put, keep underlying
  - With cash + call, exercise, using cash, to get underlying
- Stock ends down $\Rightarrow$
  - With underlying + put, exercise, using underlying, to get cash
  - With call + cash, keep cash

## Prices of puts and calls

- Prior to maturity, for European options,

. . .

$$ \text{price of (underlying + put)} = \text{price of (cash + call)}$$

. . .

$$ \text{price of underlying + price of put} = $$
$$ \text{PV of strike} + \text{price of call}$$

## Example

- One year to maturity, interest rate = 5%, strike = 100
- Suppose underlying is at 90 and price of call = 10
- Price of put should be

. . .

$$\frac{100}{1.05} + 10 - 90 = 25.24$$

## Difference between call and put prices

- price of underlying - PV of strike = price of call - price of put
  - difference in prices (call minus put) goes up 1-for-1 with underlying
  - call price > put when price of underlying > PV of strike
- PV of strike - price of underlying = price of put - price of call
  - difference in prices (put minus call) goes up 1/(1+r) for 1 with strike
  - e.g., strike $\uparrow$ 5 $\Rightarrow$ put - call $\uparrow$ 5/(1+r)

```{python}
import yfinance as yf
tick = yf.Ticker('aapl')
```

## Apple calls and puts

. . .

```.p
tick.history().iloc[-1].round(2)
```

. . .

```{python}
```{python}
import yfinance as yf
tick = yf.Ticker('aapl')
price = tick.history().Close.iloc[-1]
print(f"{last AAPL price was ${price:.2f}}")
roundprice = round(price/5)*5
strikes = [roundprice + x for x in range(-20, 25, 5)]
options = tick.option_chain("2023-03-17")
calls = options.calls.lastPrice.loc[strikes]
puts = options.put.lastPrice.loc[strikes]

import plotly.express as px
fig = px.scatter(
  x = puts-calls
  y = strikes,
  trendline="ols"
)

```

## Apple calls on Feb 3, 2023

. . .

```.p
df = tick.option_chain("2023-03-17").calls
df = df.set_index("strike")
df.iloc[:,2:5].loc[130:170]
```

## {.smaller}



```{python}
df = tick.option_chain("2023-03-17").calls
df = df.set_index("strike")
df.iloc[:,2:5].loc[130:170]
```


## Possible call returns

. . .

Suppose we bought the 140 (in the money) or the 150 or the 160 (out of the money) calls at the last prices shown.

. . .


```{python}
import numpy as np
import plotly.graph_objects as go

strikes = [140, 150, 160]
prems = [df.loc[x, "lastPrice"] for x in strikes]
underlying = np.linspace(120, 180, 100)
values = [np.maximum(underlying-x, 0) for x in strikes]
rets = [v/p - 1 for v, p in zip(values, prems)]

traces = [
  go.Scatter(
    x = underlying,
    y = ret,
    mode="lines",
    hovertemplate="underlying = $%{x:.2f}<br>call return = %{y:.1%}<extra></extra>",
    name=f"{strike:.0f} strike at {prem:.2f}",
  ) for ret, strike, prem in zip(rets, strikes, prems)
]

fig = go.Figure()
for trace in traces:
  fig.add_trace(trace)
fig.update_layout(
    xaxis_title="Apple Stock Price",
    yaxis_title="Call Option Returns",
    xaxis_title_font = {"size":18},
    yaxis_title_font =  {"size":18},
    template="plotly_white",
    yaxis_tickformat=".0%",
    height=400,  
    width=800,
    legend=dict(
      x = 0.01,
      y = 0.99
    )
)
fig.show()