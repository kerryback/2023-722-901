---
title:  "Industries"
author: <br><br><br><br><span style="font-family:perpetua; font-variant:small-caps; color:#606060;">Kerry Back</span><br><br><img src="RiceBusiness-transparent-logo-sm.png"  height=80>
execute:
  echo: false
  jupyter: python3
  cache: true
format: 
  revealjs:
    highlight-style: monokai
    code-fold: true
    code-copy: hover
    scrollable: true
    slide-number: true
    preview-links: true
    self-contained: true
    controls: true
    transition: fade
    theme: [solarized, 2023.scss]
    incremental: true
---

## Definition of Industries

- Industry groupings are usually built on SIC codes
- We'll use a couple of examples: Fama-French 12 industries and Fama-French 48 industries
- The mappings SIC code $\mapsto$ industry can be found on French's website
- Here are the 12 industries:

. . .

```{python}
import pandas as pd
inds = pd.read_csv("Siccodes12.csv", index_col="industry")
inds
```

## Dummy variables

- We can use categorical variables in numerical models by creating dummy variables.
- We create a dummy variable for each industry defined as: =1 if the firm is in the industry and =0 otherwise.
- By including dummy variables in a linear regression, we allow each industry to have a different intercept.

## Example

- Get data as in the simple backtest, except
  - include siccd in the select statement 
  - include " where date='2020-01' " to make a smaller example
- Define a function get_industry(siccd) that selects the right industry for each SIC code using the Fama-French classification.
- Define the industry as "Other" if an SIC code doesn't fit any of the ranges.

## Head of the dataframe

```{python}
import pandas as pd
import pymssql
from sqlalchemy import create_engine
from sklearn.linear_model import LinearRegression

server = "mssql-82792-0.cloudclusters.net:16272"
username = "user"
password = "RiceOwls1912" 
database = "ghz"
string = "mssql+pymssql://" + username + ":" + password + "@" + server + "/" + database

conn = create_engine(string).connect()

df = pd.read_sql(
    """
    select date, ticker, bm, roeq, ret, siccd
    from data
    where date='2020-01'
    order by date, ticker
    """,
    conn
  )
df = df.dropna()
df = df.set_index(["date", "ticker"])

def get_industry(sic):
  try:
    return inds[(inds.start<=sic)&(sic<=inds.end)].index[0]
  except:
    return "Other"

df["industry"] = df.siccd.map(get_industry)
df.head()
```

## Creating dummies

- pandas has a get_dummies function.
- scikit-learn has OneHotEncoder.
- We'll use scikit-learn's LinearRegression for both.

. . .

```.p
from sklearn.linear_model import LinearRegression
```

## get_dummies

- Create dummies, add to dataframe and include in features.

. . .

```.p
d = pd.get_dummies(df.industry)
ind_names = d.columns.to_list()
features = ["bm", "roeq"] + ind_names

df2 = df.join(d)
model.fit(df2[features], df2["ret"])
pd.Series(model.coef_, index=features)
```

. . .

```{python}
d = pd.get_dummies(df.industry)
df2 = df.join(d)
features = ["bm", "roeq"] + d.columns.to_list()

model = LinearRegression(fit_intercept=False)
model.fit(df2[features], df2["ret"])
pd.Series(model.coef_, index=features)
```

## One Hot Encoder

- Add to a pipeline with LinearRegression, then fit the pipeline.
- Dummies are created as a preprocessing step within the pipeline but not added to the dataframe.

. . .

```.p
from sklearn.compose import make_column_transformer
from sklearn.preprocessing import OneHotEncoder
from sklearn.pipeline import make_pipeline
```

##

. . .

```.p
transform = make_column_transformer(
    (OneHotEncoder(), ["industry"]),
    remainder="passthrough"
)

model = LinearRegression(fit_intercept=False)
pipe = make_pipeline(transform, model)
pipe.fit(df[["bm", "roeq", "industry"]], df["ret"])
model.coef_
```

. . .

```{python}
from sklearn.compose import make_column_transformer
from sklearn.preprocessing import OneHotEncoder
from sklearn.pipeline import make_pipeline

transform = make_column_transformer(
    (OneHotEncoder(), ["industry"]),
    remainder="passthrough"
)

model = LinearRegression(fit_intercept=False)
pipe = make_pipeline(transform, model)
pipe.fit(df[["bm", "roeq", "industry"]], df["ret"])
model.coef_
```
