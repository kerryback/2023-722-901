---
title:  "Option Returns"
author: <br><br><br><br><span style="font-family:perpetua; font-variant:small-caps; color:#606060;">Kerry Back</span><br><br><img src="RiceBusiness-transparent-logo-sm.png"  height=80>
execute:
  echo: false
  jupyter: python3
format: 
  revealjs:
    highlight-style: monokai
    code-fold: true
    code-copy: hover
    scrollable: true
    slide-number: true
    preview-links: true
    self-contained: true
    controls: true
    transition: fade
    theme: [solarized, 2023.scss]
    incremental: true
    cache: true
---

## Option Data from Yahoo 

. . .

```.p
import yfinance as yf
tick = yf.Ticker('aapl')
```

- tick.options is the set of traded maturities
- tick.option_chain("some date") is an object containing call and put data
- tick.option_chain("some date").calls is a dataframe of call info
- tick.option_chain("some date").puts is a dataframe of put info

```{python}
import yfinance as yf
tick = yf.Ticker('aapl')
```

## Apple stock price on Feb 10, 2023

. . .

```.p
tick.history().iloc[-1].round(2)
```

. . .

```{python}
tick.history().iloc[-1].round(2)
```

## Apple calls on Feb 10, 2023

. . .

```.p
df = tick.option_chain("2023-03-17").calls
df = df.set_index("strike")
df.iloc[:,2:5].loc[130:170]
```

## {.smaller}



```{python}
df = tick.option_chain("2023-03-17").calls
df = df.set_index("strike")
df.iloc[:,2:5].loc[130:170]
```


## Possible call returns

. . .

Suppose we bought the 140 (in the money) or the 150 or the 160 (out of the money) calls at the last prices shown.

. . .


```{python}
import numpy as np
import plotly.graph_objects as go

strikes = [140, 150, 160]
prems = [df.loc[x, "lastPrice"] for x in strikes]
underlying = np.linspace(120, 180, 100)
values = [np.maximum(underlying-x, 0) for x in strikes]
rets = [v/p - 1 for v, p in zip(values, prems)]

traces = [
  go.Scatter(
    x = underlying,
    y = ret,
    mode="lines",
    hovertemplate="underlying = $%{x:.2f}<br>call return = %{y:.1%}<extra></extra>",
    name=f"{strike:.0f} strike at {prem:.2f}",
  ) for ret, strike, prem in zip(rets, strikes, prems)
]

fig = go.Figure()
for trace in traces:
  fig.add_trace(trace)
fig.update_layout(
    xaxis_title="Apple Stock Price",
    yaxis_title="Call Option Returns",
    xaxis_title_font = {"size":18},
    yaxis_title_font =  {"size":18},
    template="plotly_white",
    yaxis_tickformat=".0%",
    height=400,  
    width=800,
    legend=dict(
      x = 0.01,
      y = 0.99
    )
)
fig.show()
```


## Apple puts on Feb 10, 2023

. . .

```.p
df = tick.option_chain("2023-03-17").puts
df = df.set_index("strike")
df.iloc[:,2:5].loc[130:170]
```

## {.smaller}



```{python}
df = tick.option_chain("2023-03-17").puts
df = df.set_index("strike")
df.iloc[:,2:5].loc[130:170]
```


## Possible put returns

. . .

Suppose we bought the 140 (out of the money) or the 150 or the 160 (in the money) puts at the last prices shown.

. . .


```{python}
import numpy as np
import plotly.graph_objects as go

strikes = [140, 150, 160]
prems = [df.loc[x, "lastPrice"] for x in strikes]
underlying = np.linspace(120, 180, 100)
values = [np.maximum(x-underlying, 0) for x in strikes]
rets = [v/p - 1 for v, p in zip(values, prems)]

traces = [
  go.Scatter(
    x = underlying,
    y = ret,
    mode="lines",
    hovertemplate="underlying = $%{x:.2f}<br>put return = %{y:.1%}<extra></extra>",
    name=f"{strike:.0f} strike at {prem:.2f}",
  ) for ret, strike, prem in zip(rets, strikes, prems)
]

fig = go.Figure()
for trace in traces:
  fig.add_trace(trace)
fig.update_layout(
    xaxis_title="Apple Stock Price",
    yaxis_title="Put Option Returns",
    xaxis_title_font = {"size":18},
    yaxis_title_font =  {"size":18},
    template="plotly_white",
    yaxis_tickformat=".0%",
    height=400,  
    width=800,
    legend=dict(
      x = 0.99,
      y = 0.99,
      xanchor="right"
    )
)
fig.show()
```